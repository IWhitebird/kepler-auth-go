basePath: /
definitions:
  models.AuthGroup:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      permissions:
        items:
          $ref: '#/definitions/models.Permission'
        type: array
      updated_at:
        type: string
    type: object
  models.AuthGroupRequest:
    properties:
      name:
        type: string
      permissions:
        items:
          type: integer
        type: array
    required:
    - name
    type: object
  models.ChangePasswordRequest:
    properties:
      new_password:
        minLength: 6
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
  models.EmailRequest:
    properties:
      body:
        type: string
      subject:
        type: string
      to:
        type: string
    required:
    - body
    - subject
    - to
    type: object
  models.Group:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      is_default:
        type: boolean
      name:
        type: string
      permissions:
        items:
          type: integer
        type: array
      updated_at:
        type: string
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.GroupRequest:
    properties:
      description:
        type: string
      is_active:
        type: boolean
      is_default:
        type: boolean
      name:
        type: string
      permissions:
        items:
          type: integer
        type: array
    required:
    - name
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.LoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.PaginatedAuthGroupResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.AuthGroup'
        type: array
      page:
        type: integer
      page_size:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  models.PaginatedGroupResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Group'
        type: array
      page:
        type: integer
      page_size:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  models.PaginatedPermissionResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Permission'
        type: array
      page:
        type: integer
      page_size:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  models.PaginatedUserResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.UserResponse'
        type: array
      page:
        type: integer
      page_size:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  models.Permission:
    properties:
      codename:
        type: string
      content_type:
        type: string
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  models.User:
    properties:
      city:
        type: string
      country:
        type: string
      created_at:
        type: string
      email:
        type: string
      groups:
        items:
          $ref: '#/definitions/models.Group'
        type: array
      id:
        type: integer
      is_active:
        type: boolean
      is_admin:
        type: boolean
      is_deleted:
        type: boolean
      is_staff:
        type: boolean
      is_verified:
        type: boolean
      name:
        type: string
      organization:
        type: integer
      phone_number:
        type: string
      profile_picture:
        type: string
      send_email:
        type: boolean
      send_whatsapp:
        type: boolean
      updated_at:
        type: string
      whatsapp_no:
        type: string
    type: object
  models.UserResponse:
    properties:
      city:
        type: string
      country:
        type: string
      email:
        type: string
      groups:
        items:
          $ref: '#/definitions/models.Group'
        type: array
      id:
        type: integer
      is_active:
        type: boolean
      is_admin:
        type: boolean
      is_deleted:
        type: boolean
      is_staff:
        type: boolean
      is_verified:
        type: boolean
      name:
        type: string
      organization:
        type: integer
      phone_number:
        type: string
      profile_picture:
        type: string
      send_email:
        type: boolean
      send_whatsapp:
        type: boolean
      status:
        $ref: '#/definitions/models.UserStatus'
      whatsapp_no:
        type: string
    type: object
  models.UserStatus:
    enum:
    - pending
    - active
    - deactivated
    - unknown
    type: string
    x-enum-varnames:
    - StatusPending
    - StatusActive
    - StatusDeactivated
    - StatusUnknown
  models.UserUpdateRequest:
    properties:
      city:
        type: string
      country:
        type: string
      name:
        type: string
      phone_number:
        type: string
      profile_picture:
        type: string
      send_email:
        type: boolean
      send_whatsapp:
        type: boolean
      whatsapp_no:
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: support@skylarklabs.ai
    name: API Support
    url: http://www.skylarklabs.ai/support
  description: Authentication service for Kepler platform
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Kepler Auth API
  version: "1.0"
paths:
  /api/auth-groups:
    get:
      description: Get a paginated list of auth groups with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: page_size
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginatedAuthGroupResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get all auth groups with pagination and filtering
      tags:
      - auth-groups
    post:
      consumes:
      - application/json
      description: Create a new auth group (admin only)
      parameters:
      - description: Auth group creation details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.AuthGroupRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.AuthGroup'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new auth group
      tags:
      - auth-groups
  /api/auth-groups/{id}:
    delete:
      description: Delete a specific auth group by their ID (admin only)
      parameters:
      - description: Auth Group ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete auth group by ID
      tags:
      - auth-groups
    get:
      description: Get a specific auth group by their ID
      parameters:
      - description: Auth Group ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AuthGroup'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get auth group by ID
      tags:
      - auth-groups
    patch:
      consumes:
      - application/json
      description: Update a specific auth group by their ID (admin only)
      parameters:
      - description: Auth Group ID
        in: path
        name: id
        required: true
        type: integer
      - description: Auth group update details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.AuthGroupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AuthGroup'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update auth group by ID
      tags:
      - auth-groups
  /api/auth/change-password:
    post:
      consumes:
      - application/json
      description: Change the current user's password
      parameters:
      - description: Password change details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - auth
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User login
      tags:
      - auth
  /api/auth/me:
    get:
      description: Get the authenticated user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get current user profile
      tags:
      - auth
    patch:
      consumes:
      - application/json
      description: Update the authenticated user's profile information
      parameters:
      - description: Profile update details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update current user profile
      tags:
      - auth
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: Registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - auth
  /api/email/send:
    post:
      consumes:
      - application/json
      description: Send email to specified recipient
      parameters:
      - description: Email details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.EmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Send email
      tags:
      - email
  /api/groups:
    get:
      description: Get a paginated list of groups with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: page_size
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      - description: Active status filter
        in: query
        name: is_active
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginatedGroupResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get all groups with pagination and filtering
      tags:
      - groups
    post:
      consumes:
      - application/json
      description: Create a new group (admin only)
      parameters:
      - description: Group creation details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.GroupRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Group'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new group
      tags:
      - groups
  /api/groups/{id}:
    delete:
      description: Delete a specific group by their ID (admin only)
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete group by ID
      tags:
      - groups
    get:
      description: Get a specific group by their ID
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Group'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get group by ID
      tags:
      - groups
    patch:
      consumes:
      - application/json
      description: Update a specific group by their ID (admin only)
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: integer
      - description: Group update details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.GroupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Group'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update group by ID
      tags:
      - groups
  /api/permissions:
    get:
      description: Get a paginated list of permissions with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: page_size
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginatedPermissionResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get all permissions with pagination and filtering
      tags:
      - permissions
  /api/users:
    get:
      description: Get a paginated list of users with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: page_size
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      - description: User status filter
        enum:
        - active
        - pending
        - deactivated
        in: query
        name: status
        type: string
      - description: Active status filter
        in: query
        name: is_active
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginatedUserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get all users with pagination and filtering
      tags:
      - users
  /api/users/{id}:
    delete:
      description: Soft delete a specific user by their ID (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete user by ID
      tags:
      - users
    get:
      description: Get a specific user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Update a specific user by their ID (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User update details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user by ID
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
